import axios from 'axios'
import { Film } from '../interfaces'

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000'
const POSTER_CACHE_PREFIX = 'movie_poster_'
const POSTER_CACHE_EXPIRY = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º –ø–æ—Å—Ç–µ—Ä–æ–≤
const getPosterFromCache = (url: string): string | null => {
  try {
    const cacheKey = POSTER_CACHE_PREFIX + btoa(url)
    const cached = localStorage.getItem(cacheKey)
    if (!cached) return null

    const { data, timestamp } = JSON.parse(cached)
    if (Date.now() - timestamp > POSTER_CACHE_EXPIRY) {
      localStorage.removeItem(cacheKey)
      return null
    }

    return data
  } catch (error) {
    console.error('Error reading from poster cache:', error)
    return null
  }
}

const cachePoster = async (url: string): Promise<string> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getPosterFromCache(url)
    if (cached) return cached

    // –î–ª—è S3 URL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º no-cors
    if (url.includes('s3.timeweb.cloud')) {
      return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è S3
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö URL –ø—Ä–æ–±—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å
    try {
      const response = await fetch(url)
      const blob = await response.blob()
      const reader = new FileReader()

      return new Promise((resolve, reject) => {
        reader.onloadend = () => {
          try {
            const base64data = reader.result as string
            const cacheKey = POSTER_CACHE_PREFIX + btoa(url)
            localStorage.setItem(
              cacheKey,
              JSON.stringify({
                data: base64data,
                timestamp: Date.now(),
              }),
            )
            resolve(base64data)
          } catch (error) {
            console.error('Error caching poster:', error)
            resolve(url) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          }
        }
        reader.onerror = reject
        reader.readAsDataURL(blob)
      })
    } catch (error) {
      console.error('Error caching poster:', error)
      return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  } catch (error) {
    console.error('Error in cachePoster:', error)
    return url // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è JWT
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  },
)

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response) => {
    console.log(`‚ú® API Response [${response.config.url}]:`, {
      status: response.status,
      data: response.data,
      headers: response.headers,
    })
    return response
  },
  (error) => {
    console.error(`üî• API Error [${error.config?.url}]:`, {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status,
    })

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (error.response?.status === 401) {
      console.log('üîí –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...')
      localStorage.removeItem('token')
      window.location.href = '/login'
    }

    return Promise.reject(error)
  },
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–ª–æ–∞–¥–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const preloadImage = (url: string) => {
  if (url.includes('s3.timeweb.cloud')) {
    const img = new Image()
    img.src = url
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Movie –≤ Film
const convertMovieToFilm = async (movie: any): Promise<Film | null> => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  if (!movie.title || movie.title === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
    return null
  }

  // –ö–µ—à–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  let posterUrl = movie.poster_url || ''
  if (posterUrl) {
    posterUrl = await cachePoster(posterUrl)
    // –ü—Ä–µ–ª–æ–∞–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    preloadImage(posterUrl)
  }

  return {
    movie_id: movie.movie_id || movie.id,
    title: movie.title || '',
    description: movie.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    release_date: movie.release_date || '',
    rating: movie.rating || 0,
    poster_url: posterUrl,
    video_url: movie.video_url || '',
    duration: movie.duration || 0,
    genres: movie.genres?.split('|') || [],
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–æ–≤
async function processMovies(movies: any[]): Promise<Film[]> {
  if (!movies || !Array.isArray(movies)) {
    console.warn('Invalid movies data:', movies)
    return []
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è
  const validMovies = movies.filter((movie) => movie && movie.title)
  console.log('Valid movies:', validMovies)

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º
  const processedMovies = validMovies.map((movie) => ({
    movie_id: movie.movie_id || movie.id || 0,
    title: movie.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
    description: movie.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    release_date: movie.release_date || '',
    rating: typeof movie.rating === 'number' ? movie.rating : 0,
    poster_url: movie.poster_url || '',
    video_url: movie.video_url || '',
    duration: typeof movie.duration === 'number' ? movie.duration : 0,
    genres: movie.genres?.split('|') || [],
  }))

  return processedMovies
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
const decodeJWT = (token: string): any => {
  try {
    const base64Url = token.split('.')[1]
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
        .join(''),
    )
    return JSON.parse(jsonPayload)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JWT:', error)
    return null
  }
}

interface LoginResponse {
  access_token: string
  user_type: string
  username: string
  user_id: number
}

export const MovieService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
  async getMovies(page: number = 1, size: number = 50) {
    try {
      const response = await api.get<any[]>('/api/v1/movies', {
        params: { page, size },
      })
      return await processMovies(response.data)
    } catch (error) {
      console.error('‚ùå Error fetching movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∏–ª—å–º–µ
  async getMovie(movieId: number): Promise<Film | null> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∏–ª—å–º
      const fakeMovie = localStorage.getItem(`fake_movie_${movieId}`)
      if (fakeMovie) {
        const parsedMovie = JSON.parse(fakeMovie)
        return parsedMovie as Film
      }

      // –ï—Å–ª–∏ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await api.get<any>(`/api/v1/movies/${movieId}/show_page`)
      return await convertMovieToFilm(response.data)
    } catch (error) {
      console.error('‚ùå Error fetching movie:', error)
      return null
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  async getRecommendations(count: number = 10) {
    try {
      const userId = localStorage.getItem('user_id')
      if (!userId) {
        console.warn(
          '‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        )
        return await this.getTopRated()
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ –¥–ª—è API
      const numericId = parseInt(userId)
      if (isNaN(numericId)) {
        console.warn(
          '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤',
        )
        return await this.getTopRated()
      }

      const response = await api.get<any[]>('/api/v1/movies/you_may_like', {
        params: { user_id: numericId, top_n: count },
      })
      return await processMovies(response.data)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
      console.warn('‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
      return await this.getTopRated()
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
  async getTopRated() {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å 12
      const response = await api.get<any[]>('/api/v1/movies/top_rated', {
        params: { limit: 20 }, // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 20, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å 12
      })
      const movies = await processMovies(response.data)
      return movies.slice(0, 12) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 12 —Ñ–∏–ª—å–º–æ–≤
    } catch (error) {
      console.error('‚ùå Error fetching top rated movies:', error)
      return []
    }
  },

  // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
  async searchMovies(query: string) {
    try {
      console.log('Searching for:', query)

      if (!query || typeof query !== 'string') {
        console.warn('Invalid search query:', query)
        return []
      }

      const trimmedQuery = query.trim().toLowerCase()
      if (!trimmedQuery) {
        return []
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç—å
      const response = await api.get<any[]>('/api/v1/movies/search', {
        params: {
          movie: trimmedQuery,
          limit: 100, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        },
      })

      if (!response.data) {
        console.warn('Empty response data')
        return []
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const movies = await processMovies(response.data)

      // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
      const queryWords = trimmedQuery
        .split(/\s+/)
        .filter((word) => word.length > 1)

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const sortedMovies = movies.sort((a, b) => {
        const aTitle = a.title.toLowerCase()
        const bTitle = b.title.toLowerCase()

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (aTitle === trimmedQuery && bTitle !== trimmedQuery) return -1
        if (bTitle === trimmedQuery && aTitle !== trimmedQuery) return 1

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
        const aMatchCount = queryWords.filter((word) =>
          aTitle.includes(word),
        ).length
        const bMatchCount = queryWords.filter((word) =>
          bTitle.includes(word),
        ).length

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–≤—à–∏—Ö —Å–ª–æ–≤
        if (aMatchCount !== bMatchCount) {
          return bMatchCount - aMatchCount
        }

        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Å–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
        const aInOrder = queryWords.every((word, index) => {
          const prevWords = queryWords.slice(0, index)
          const prevIndex = prevWords.length
            ? Math.max(...prevWords.map((w) => aTitle.indexOf(w)))
            : -1
          return aTitle.indexOf(word) > prevIndex
        })

        const bInOrder = queryWords.every((word, index) => {
          const prevWords = queryWords.slice(0, index)
          const prevIndex = prevWords.length
            ? Math.max(...prevWords.map((w) => bTitle.indexOf(w)))
            : -1
          return bTitle.indexOf(word) > prevIndex
        })

        if (aInOrder && !bInOrder) return -1
        if (!aInOrder && bInOrder) return 1

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        return (b.rating || 0) - (a.rating || 0)
      })

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      const filteredMovies = sortedMovies.filter((movie) => {
        const title = movie.title.toLowerCase()
        return queryWords.every((word) => title.includes(word))
      })

      console.log('Final processed and filtered movies:', filteredMovies)
      return filteredMovies
    } catch (error) {
      console.error('‚ùå Error searching movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
  async getSimilarMovies(movieId: number) {
    try {
      const response = await api.get<any[]>(
        '/api/v1/movies/may_be_interesting',
        {
          params: { movie_id: movieId },
        },
      )
      return await processMovies(response.data)
    } catch (error) {
      console.error('‚ùå Error fetching similar movies:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
  getStreamUrl(movieId: string): string {
    return `${API_URL}/api/v1/movies/${movieId}/stream`
  },

  // –ü—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
  async preloadTopMovies() {
    try {
      const response = await api.get<any[]>('/api/v1/movies/top_rated')
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
      processMovies(response.data).catch(console.error)
    } catch (error) {
      console.error('‚ùå Error preloading top movies:', error)
    }
  },

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async login(username: string, password: string): Promise<LoginResponse> {
    const response = await api.post('/api/v1/users/login', {
      username,
      password,
    })
    return response.data
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
  async addMovie(formData: FormData) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const title = formData.get('title')?.toString().trim()
      const description = formData.get('description')?.toString().trim()
      const genres = formData.get('genres')?.toString().trim()
      const poster = formData.get('poster')

      if (!title || !description || !genres || !poster) {
        throw new Error('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã')
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FormData –¥–ª—è API
      const apiFormData = new FormData()

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      apiFormData.append('title', title)
      apiFormData.append('description', description)

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      const formattedGenres = genres
        .split('|')
        .map((g) => g.trim())
        .filter((g) => g)
        .join('|')

      if (!formattedGenres) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∂–∞–Ω—Ä–æ–≤')
      }

      apiFormData.append('genres', formattedGenres)

      // –ü—Ä–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä
      if (poster instanceof File) {
        if (poster.size === 0) {
          throw new Error('–§–∞–π–ª –ø–æ—Å—Ç–µ—Ä–∞ –ø—É—Å—Ç')
        }
        apiFormData.append('poster', poster)
      } else {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–µ—Ä–∞')
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        title,
        description,
        genres: formattedGenres,
        poster:
          poster instanceof File
            ? {
                name: poster.name,
                type: poster.type,
                size: poster.size,
              }
            : 'invalid poster',
      })

      const response = await api.post('/api/v1/movies/add', apiFormData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Accept: 'application/json',
        },
        transformRequest: [(data) => data],
        timeout: 30000,
      })

      if (!response.data) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
      }

      console.log('‚ú® –§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', response.data)
      return response.data
    } catch (error: any) {
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        headers: error.response?.headers,
        error: error,
      })

      if (error.response?.status === 500) {
        throw new Error(
          '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        )
      }

      const errorDetail = error.response?.data?.detail || ''

      if (errorDetail.includes('violates not-null constraint')) {
        throw new Error(
          '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        )
      }

      if (error.response?.status === 413) {
        throw new Error('–§–∞–π–ª –ø–æ—Å—Ç–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')
      } else if (error.response?.status === 415) {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')
      } else if (error.response?.data?.detail) {
        throw new Error(error.response.data.detail)
      }

      throw new Error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—åÔøΩÔøΩ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      )
    }
  },

  // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ Elasticsearch
  async elasticSearch(query: string, limit: number = 10) {
    try {
      const response = await api.get<any[]>('/api/v1/movies/elastic_search', {
        params: { query, limit },
      })
      return await processMovies(response.data)
    } catch (error) {
      console.error('‚ùå Error searching movies with Elasticsearch:', error)
      return []
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getAllMovies(page: number = 1, size: number = 24) {
    try {
      const response = await api.get<any[]>('/api/v1/movies', {
        params: { page, size },
      })

      if (!response.data) {
        console.warn('Empty response data')
        return { movies: [], total: 0 }
      }

      const movies = await processMovies(response.data)

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const total = parseInt(response.headers['x-total-count'] || '0', 10)

      return {
        movies,
        total: total || movies.length,
      }
    } catch (error) {
      console.error('‚ùå Error fetching all movies:', error)
      return { movies: [], total: 0 }
    }
  },
}
